#include "broot_force_direct.h"


ThreadPool::ThreadPool(size_t threads)
    : stop(false)
{
    for(size_t i = 0; i < threads; ++i)
        workers.emplace_back(
            [this]
            {
                for(;;)
                {
                    std::function<void()> task;

                    {
                        std::unique_lock<std::mutex> lock(this->queue_mutex);
                        this->condition.wait(lock, [this] { return this->stop || !this->tasks.empty(); });
                        if(this->stop && this->tasks.empty())
                            return;
                        task = std::move(this->tasks.front());
                        this->tasks.pop();
                    }

                    task();
                }
            }
        );
}

template <class F, class... Args>
auto ThreadPool::enqueue(F &&f, Args &&...args)
    -> std::future<typename std::result_of<F(Args...)>::type>
{
    using return_type = typename std::result_of<F(Args...)>::type;

    auto task = std::make_shared<std::packaged_task<return_type()>>(
        std::bind(std::forward<F>(f), std::forward<Args>(args)...));

    std::future<return_type> res = task->get_future();
    {
        std::unique_lock<std::mutex> lock(queue_mutex);

        // don't allow enqueueing after stopping the pool
        if (stop)
            throw std::runtime_error("enqueue on stopped ThreadPool");

        tasks.emplace([task]()
                      { (*task)(); });
    }
    condition.notify_one();
    return res;
}

ThreadPool::~ThreadPool()
{
    {
        std::unique_lock<std::mutex> lock(queue_mutex);
        stop = true;
    }
    condition.notify_all();
    for (std::thread &worker : workers)
        worker.join();
}


void test::get_weight_distribution_direct(CRC *c){
    /*
    ThreadPool pool(std::thread::hardware_concurrency()); // Create a pool with hardware concurrency threads
    std::vector<std::future<void>> futures;

    std::cout << "\n[INFO] Calculating weight distribution...direct approach" << std::endl;

    // the code is currently limited to data that is a multiple of 8
    if (c->kBits % 8 != 0)
    {
        // throw error
        throw std::invalid_argument("kBits is not a multiple of 8");
        return;
    }

    // generate the lookup table
    this->hamming_weight_LUT = generateLookupTable();

    // data vector size of k-Bits/8
    std::vector<uint8_t> data((uint32_t)c->kBits / 8, 0);
    // the weight distribution must be n+1 because weight 0 reflects
    // the empty set. which is not needed but part of it
    std::vector<uint32_t> weight_distribution(c->nBits + 1, 0);
    std::vector<uint8_t> crc_vector((uint32_t)c->rBits / 8, 0);


    uint32_t weight = 0;
    uint32_t crc = 0;

    uint64_t chunk_size = 1000000;

    for (int i = 0; i < 4000; ++i){
        // Enqueue tasks in the pool
        futures.push_back(pool.enqueue([i]()
                                       {
            // Your task code here
            std::cout << "Processing chunk " << i << std::endl; 
        }));
    }

    // Wait for all tasks to complete
    for (auto &future : futures)
    {
        future.get();
    }
    */
}